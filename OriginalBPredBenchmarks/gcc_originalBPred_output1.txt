 main path_include trigraph_pcp newline_fix name_newline_fix get_lintcmd rescan expand_to_temp_buffer handle_directive timestamp special_symbol do_include redundant_include_p is_system_include finclude record_control_macro import_hash lookup_import add_import check_precompiled check_preconditions pcfinclude pcstring_used write_output pass_thru_directive create_definition do_define check_macro_name compare_defs comp_def_part collect_expansion do_assert do_unassert check_assertion compare_token_lists read_token_list free_token_list assertion_install assertion_lookup delete_assertion do_line do_undef do_error do_warning do_once do_ident do_pragma do_sccs do_if do_elif eval_if_expression do_xifdef conditional_skip skip_if_group do_else do_endif validate_else skip_to_end_of_comment skip_quoted_string skip_paren_group output_line_command macroexpand macarg macarg1 discard_comments delete_newlines error error_from_errno warning error_with_line pedwarn pedwarn_with_file_and_line print_containing_files line_for_error grow_outbuf install lookup delete_macro hashf dump_single_macro dump_all_macros dump_defn_1 dump_arg_n initialize_char_syntax initialize_builtins make_definition make_undef make_assertion append_include_chain deps_output fatal fancy_abort perror_with_name pfatal_with_name memory_full xmalloc xrealloc xcalloc savestring file_size_and_mode
time in parse: 9.288000
time in integration: 0.912000
time in jump: 9.976000
time in cse: 20.640000
time in loop: 7.852000
time in cse2: 19.928000
time in flow: 10.764000
time in combine: 26.808000
time in sched: 9.692000
time in local-alloc: 12.148000
time in global-alloc: 13.892000
time in sched2: 7.608000
time in dbranch: 14.164000
time in shorten-branch: 0.412000
time in stack-reg: 0.000000
time in final: 6.592000
time in varconst: 0.104000
time in symout: 0.000000
time in dump: 0.000000
sim-bpred: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

sim: command line: ./sim-bpred -redir:sim gcc_originalBPred_output1.txt -bpred 2lev -bpred:2lev 2048 16384 14 0 gcc/Gcc gcc/cccp.i -o gcc/cccp.s 

sim: simulation started @ Wed Apr 15 00:35:05 2015, options follow:

sim-bpred: This simulator implements a branch predictor analyzer.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     gcc_originalBPred_output1.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-bpred                   2lev # branch predictor type {nottaken|taken|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      2048 16384 14 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.



sim: ** starting functional simulation w/ predictors **
warning: syscall: sigvec ignored
warning: syscall: sigvec ignored

sim: ** simulation statistics **
sim_num_insn             1625716628 # total number of instructions executed
sim_num_refs              646371501 # total number of loads and stores executed
sim_elapsed_time                330 # total simulation time in seconds
sim_inst_rate          4926414.0242 # simulation speed (in insts/sec)
sim_num_branches          324967013 # total number of branches executed
sim_IPB                      5.0027 # instruction per branch
bpred_2lev.lookups        324967013 # total number of bpred lookups
bpred_2lev.updates        324967013 # total number of updates
bpred_2lev.addr_hits      293043604 # total number of address-predicted hits
bpred_2lev.dir_hits       299619226 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses          25347787 # total number of misses
bpred_2lev.jr_hits         23717796 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen         29765345 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP      2660416 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP      8578589 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.9018 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.9220 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.7968 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.3101 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes     21186759 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops     21186756 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP     21186756 # total number of RAS predictions used
bpred_2lev.ras_hits.PP     21057380 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9939 # RAS prediction rate (i.e., RAS hits/used RAS)

